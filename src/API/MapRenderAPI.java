package API;

import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.List;

/** Lowest-level interface for communicating with the Google Maps Directions API and Maps Static API.
 * @author Joshua Jang
 */
public class MapRenderAPI {
    private static String encodeLocations(List<String> locations) {
        StringBuilder formattedString = new StringBuilder();

        for (int i = 0; i < locations.size(); i++) {
            formattedString.append(locations.get(i));
            if (i < locations.size() - 1) formattedString.append(" | ");
        }

        return formattedString.toString();
    }

    /** Call the API with multiple origins and destinations, at once.
     * @param encodedPolyline A string in the encoded polyline format generated by getPolyline().
     * @return A PNG image buffer that can be displayed directly to a window or saved to a file.
     */
    public static BufferedImage generateMapWithPolyline(String encodedPolyline, List<String> markerAddresses) {
        final String API_URL =
                "https://maps.googleapis.com/maps/api/staticmap?size=600x400&&path=color:0xff0000|weight:4|enc:%s&markers=%s&key=%s";

        OkHttpClient client = new OkHttpClient().newBuilder().build();
        Request request = new Request.Builder()
                .url(String.format(API_URL, encodedPolyline, encodeLocations(markerAddresses), APIKeys.GOOGLE_MAPS_KEY))
                .build();
        try {
            Response response = client.newCall(request).execute();

            return ImageIO.read(response.body().byteStream());
        } catch (IOException | JSONException e) {
            throw new RuntimeException(e);
        }
    }

    /** Call the API with multiple origins and destinations, at once.
     * @param waypoints A list of addresses, in order, which should be visited by the route.
     * @param mode One of three strings: "walking", "transit", or "biking", which determines the mode of transport for all.
     *             "transit" only accepts TWO waypoints.
     * @return A string in the encoded polyline format, which can be then used to render path overlays.
     */
    public static String getPolyline(List<String> waypoints, String mode) {
        final String API_URL =
                "https://maps.googleapis.com/maps/api/directions/json?origin=%s&destination=%s&mode=%s&waypoints=%s&key=%s";

        OkHttpClient client = new OkHttpClient().newBuilder().build();
        Request request = new Request.Builder()
                .url(String.format(API_URL, waypoints.get(0), waypoints.get(waypoints.size() - 1), mode, encodeLocations(waypoints.subList(1, waypoints.size() - 1)), APIKeys.GOOGLE_MAPS_KEY))
                .build();
        try {
            Response response = client.newCall(request).execute();
            JSONObject responseBody = new JSONObject(response.body().string());
            String overviewPolyline = extractFirstPolyline(responseBody);

            return overviewPolyline;
        } catch (IOException | JSONException e) {
            throw new RuntimeException(e);
        }
    }

    // Method to extract the overview polyline from Directions API response
    private static String extractFirstPolyline(JSONObject responseBody) {
        JSONArray routes = responseBody.getJSONArray("routes");
        if (routes.length() > 0) {
            JSONObject route = routes.getJSONObject(0);

            JSONObject overviewPolyline = route.getJSONObject("overview_polyline");
            if (overviewPolyline.has("points")) {
                return overviewPolyline.getString("points");
            }
        }
        return null;
    }
}